@using MathKeyboardEngine
@inject IJSRuntime JS

<div @ref=key @onclick=OnClick class="@(SelectionModeInsertAction != null ? CssHelper.GetSelectionModeClass(GetMathTextboxInfo().KeyboardMemory) : "")"></div>

@code {
	ElementReference key;

	[Parameter, EditorRequired]
	public Func<TreeNode> GetTreeNode { get; set; } = () => throw new ArgumentNullException($"{nameof(VirtualKey)}.{nameof(GetTreeNode)}");

	[Parameter, EditorRequired]
	public Func<MathTextboxInfo> GetMathTextboxInfo { get; set; } = () => throw new ArgumentNullException($"{nameof(VirtualKey)}.{nameof(GetMathTextboxInfo)}");

	[Parameter]
	public Action<KeyboardMemory, TreeNode> InsertAction { get; set; } = (k, node) => k.Insert(node);

	[Parameter]
	public Action<KeyboardMemory, BranchingNode>? SelectionModeInsertAction { get; set; }

	[Parameter]
	public string? OverrideLatexInKey { get; set; }

	public async Task OnClick()
	{ 
		var info = GetMathTextboxInfo();
		var k = info.KeyboardMemory;
		var node = GetTreeNode();

		if (k.InSelectionMode())
		{
			if (SelectionModeInsertAction == null)
			{
				InsertAction(k, node);
			}
			else
			{
				SelectionModeInsertAction(k, (BranchingNode)node);
			}
			k.LeaveSelectionMode();
		}
		else
		{
			InsertAction(k, node);
		}
		await info.AfterKeyboardMemoryUpdatedAsync();
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		await RenderLatexInKeyAsync(GetTreeNode(), key);
		await base.OnAfterRenderAsync(firstRender);
	}

	private async Task RenderLatexInKeyAsync(TreeNode node, ElementReference key)
	{
		await JS.InvokeVoidAsync("katex.render", OverrideLatexInKey ?? node.GetViewModeLatex(GetMathTextboxInfo().LatexConfiguration), key, new { throwOnError = false});
	}
}