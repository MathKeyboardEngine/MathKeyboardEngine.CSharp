@page "/"
@using MathKeyboardEngine
@inject IJSRuntime JS

<PageTitle>MathKeyboardEngine + KaTeX (in a Blazor WebAssembly App)</PageTitle>

<h1>MathKeyboardEngine + KaTeX (in a Blazor WebAssembly App)</h1>

<div id="typesetEditModeLatex" @ref=typesetEditModeLatex></div>
<div id="pureLatexFromPhysicalKeys">@pureLatex</div>
<div id="viewModeLatex">@viewModeLatex</div>
<i>Example keys - to be styled - to help you design your virtual math keyboard</i>
<div id="mathKeyboard">
	<div @onclick=ToggleSelectionMode id="selectionModeToggle"></div>
	<div @onclick=MoveUpClicked>&#x25B2;</div>
	<div @onclick=DeleteKeyClicked class="@CssHelper.GetSelectionModeClass(_keyboardMemory)">&#128293;</div>
	<br />
	<div @onclick=MoveLeftClicked class="@CssHelper.GetSelectionModeClass(_keyboardMemory)">&#x25C0;</div>
	<div @onclick=MoveDownClicked>&#x25BC;</div>
	<div @onclick=MoveRightClicked class="@CssHelper.GetSelectionModeClass(_keyboardMemory)">&#x25B6;</div>
	<div onclick="const settingsContainer = document.getElementById('settingsContainer'); settingsContainer.style.display = settingsContainer.style.display == 'block' ? 'none' : 'block';">
		<strong>Settings</strong>
    </div>
    <div id="settingsContainer">
		<div @onclick=ToggleMultiplicationSignType class="setting">Output multiplication sign: <span class="setting-value">@multiplicationSignType</span></div>
		<div @onclick=ToggleDecimalSeparatorSignType class="setting">Decimal separator: <span class="setting-value">@decimalSeparatorSignType</span></div>
		<div @onclick=ToggleColorScheme class="setting">Color scheme: <span class="setting-value">@_colorScheme.Preference</span></div>
    </div>
	<br />
	@for (int i = 0; i < 10; i++)
	{
		var digit = i;
		<VirtualKey GetTreeNode="() => new DigitNode(digit.ToString())" GetMathTextboxInfo="GetMathTextboxInfo"></VirtualKey>
	}
	<VirtualKey GetTreeNode="() => new DecimalSeparatorNode(decimalSeparatorSetting)" GetMathTextboxInfo="GetMathTextboxInfo"></VirtualKey>
	<br />
	@foreach(var letter in new[] { "a", "b", "c", "x", "y", "z", @"\alpha", @"\beta", @"\gamma", @"\lambda", @"\mu", @"\pi" })
	{
		<VirtualKey GetTreeNode="() => new StandardLeafNode(letter)" GetMathTextboxInfo="GetMathTextboxInfo"></VirtualKey>
	}
	<br/>
	@foreach(var op in new[] { @"\pm", "+", "-", })
	{
		<VirtualKey GetTreeNode="() => new StandardLeafNode(op)" GetMathTextboxInfo="GetMathTextboxInfo"></VirtualKey>
	}
	<VirtualKey GetTreeNode="GetMultiplicationNode" GetMathTextboxInfo="GetMathTextboxInfo" OverrideLatexInKey="\times"></VirtualKey>
	@foreach(var op in new[] { ":", @"\div", "!", })
	{
		<VirtualKey GetTreeNode="() => new StandardLeafNode(op)" GetMathTextboxInfo="GetMathTextboxInfo"></VirtualKey>
	}
	<br/>
	<VirtualKey GetTreeNode="GetBinomialNode" GetMathTextboxInfo="GetMathTextboxInfo"></VirtualKey>
	<VirtualKey GetTreeNode="GetFractionNode" SelectionModeInsertAction="(k, node) => k.InsertWithEncapsulateSelection(node)" GetMathTextboxInfo="GetMathTextboxInfo"></VirtualKey>
	<VirtualKey GetTreeNode="GetPowerNode" SelectionModeInsertAction="(k, node) => k.InsertWithEncapsulateSelectionAndPrevious(node)" InsertAction="(k, node) => k.InsertWithEncapsulateCurrent((BranchingNode)node)" GetMathTextboxInfo="GetMathTextboxInfo"></VirtualKey>
	<VirtualKey GetTreeNode="GetSubscriptNode" SelectionModeInsertAction="(k, node) => k.InsertWithEncapsulateSelectionAndPrevious(node)" InsertAction="(k, node) => k.InsertWithEncapsulateCurrent((BranchingNode)node)" GetMathTextboxInfo="GetMathTextboxInfo"></VirtualKey>
	<VirtualKey GetTreeNode="GetSquareRootNode" SelectionModeInsertAction="(k, node) => k.InsertWithEncapsulateSelection(node)" GetMathTextboxInfo="GetMathTextboxInfo"></VirtualKey>
	<VirtualKey GetTreeNode="GetNthRootNode" GetMathTextboxInfo="GetMathTextboxInfo"></VirtualKey>
	<br />
	<VirtualKey GetTreeNode="() => new RoundBracketsNode()" SelectionModeInsertAction="(k, node) => k.InsertWithEncapsulateSelection(node)" GetMathTextboxInfo="GetMathTextboxInfo"></VirtualKey>
	<VirtualKey GetTreeNode="GetSquareBracketsNode" SelectionModeInsertAction="(k, node) => k.InsertWithEncapsulateSelection(node)" GetMathTextboxInfo="GetMathTextboxInfo"></VirtualKey>
	<VirtualKey GetTreeNode="GetCurlyBracketsNode" SelectionModeInsertAction="(k, node) => k.InsertWithEncapsulateSelection(node)" GetMathTextboxInfo="GetMathTextboxInfo"></VirtualKey>
	<VirtualKey GetTreeNode="GetPipesNode" SelectionModeInsertAction="(k, node) => k.InsertWithEncapsulateSelection(node)" GetMathTextboxInfo="GetMathTextboxInfo"></VirtualKey>
	<VirtualKey GetTreeNode="GetDoublePipesNode" SelectionModeInsertAction="(k, node) => k.InsertWithEncapsulateSelection(node)" GetMathTextboxInfo="GetMathTextboxInfo"></VirtualKey>
	<br/>
	<div style="text-align: right">
		<label for="matrixHeight">Height</label>
		<input @bind=matrixHeight type="number" min="1" class="disable-physical-keypress-math-input-when-focused" />
		<br />
		<label for="matrixWidth">Width</label>
		<input @bind=matrixWidth type="number" min="1" class="disable-physical-keypress-math-input-when-focused" />
	</div>
	<VirtualKey GetTreeNode="@(() => new MatrixNode("pmatrix", matrixWidth, matrixHeight))" GetMathTextboxInfo="GetMathTextboxInfo"></VirtualKey>
	<VirtualKey GetTreeNode="@(() => new MatrixNode("vmatrix", matrixWidth, matrixHeight))" GetMathTextboxInfo="GetMathTextboxInfo"></VirtualKey>
	<br/>
	@foreach(var x in new[] { @"\approx", "=", @"\neq", @"\leq", @"\geq", "<", ">" })
	{
		<VirtualKey GetTreeNode="() => new StandardLeafNode(x)" GetMathTextboxInfo="GetMathTextboxInfo"></VirtualKey>
	}
    <br />
	@foreach(var x in new[] { @"\mathbb{N}", @"\mathbb{Z}", @"\mathbb{R}", @"\in", @"\subset", @"\subseteq", @"\setminus", @"\exists", @"\forall", @"\neg", @"\lor", @"\land", @"\Rightarrow", @"\Leftarrow" })
	{
		<VirtualKey GetTreeNode="() => new StandardLeafNode(x)" GetMathTextboxInfo="GetMathTextboxInfo"></VirtualKey>
	}
	<br/>
	@foreach(var x in new[] {  @"\sin", @"\cos", @"\tan", @"\arcsin", @"\cos^{-1}", @"tan^{inv}" })
	{
		<VirtualKey GetTreeNode="() => new StandardLeafNode(x)" GetMathTextboxInfo="GetMathTextboxInfo"></VirtualKey>
	}
	<br/>
	<VirtualKey GetTreeNode="GetIntegralNode" GetMathTextboxInfo="GetMathTextboxInfo"></VirtualKey>
	<VirtualKey GetTreeNode="GetSumNode" GetMathTextboxInfo="GetMathTextboxInfo"></VirtualKey>
	<VirtualKey GetTreeNode="GetProductNode" GetMathTextboxInfo="GetMathTextboxInfo"></VirtualKey>
	<VirtualKey GetTreeNode="GetLimitNode" GetMathTextboxInfo="GetMathTextboxInfo"></VirtualKey>
	@foreach(var x in new[] {  @"\leftarrow", @"\rightarrow", @"\uparrow", @"\downarrow", @"\infty" })
	{
		<VirtualKey GetTreeNode="() => new StandardLeafNode(x)" GetMathTextboxInfo="GetMathTextboxInfo"></VirtualKey>
	}
</div>
<p>
	Note: if you have a physical keyboard attached, you can use that too.<br/>
	Use a backslash for pure LaTeX commands.<br/>
    Use Shift + Left for selection mode (or use the blue key).
</p>

@code {
    private KeyboardMemory _keyboardMemory = new KeyboardMemory();
    private LatexConfiguration _latexConfiguration  = new LatexConfiguration
	{
		SelectionHightlightEnd = @"\)}",
	};
    private void SetSelectionHightlightStart()
    {
        _latexConfiguration.SelectionHightlightStart = @"\colorbox{" + _colorScheme.SelectionModeColor + @"}{\(\displaystyle";
    }
    private readonly ColorScheme _colorScheme = new ColorScheme();

    protected override async Task OnInitializedAsync()
    {
        await _colorScheme.LoadOSPreferenceAsync(JS);
        SetSelectionHightlightStart();
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await DisplayResultAsync();
            DocumentEvents.OnPhysicalKeyDownHandler = OnPhysicalKeyDownAsync;
            DocumentEvents.OnPhysicalKeyUpHandler = OnPhysicalKeyUp;
        }
    }

    public void ToggleColorScheme()
    {
        _colorScheme.Toggle();
        SetSelectionHightlightStart();
        StateHasChanged();
    }

    private string decimalSeparatorSignType = "decimal point";
    private string decimalSeparatorSetting() => decimalSeparatorSignType == "decimal point" ? "." : "{,}";
    private async Task ToggleDecimalSeparatorSignType()
    {
        decimalSeparatorSignType = decimalSeparatorSignType == "decimal point" ? "decimal comma" : "decimal point";
        await DisplayResultAsync();
    }

    private string multiplicationSignType = "cross";
    private string multiplicationSymbolSetting() => multiplicationSignType == "cross" ? @"\times" : @"\cdot";
    private async Task ToggleMultiplicationSignType()
    {
        multiplicationSignType = multiplicationSignType == "cross" ? "dot" : "cross";
        await DisplayResultAsync();
    }

    private int matrixHeight { get; set; } = 2;
    private int matrixWidth { get; set; } = 2;


    public MathTextboxInfo GetMathTextboxInfo() => new MathTextboxInfo
	{
		KeyboardMemory = _keyboardMemory,
		LatexConfiguration = _latexConfiguration,
		AfterKeyboardMemoryUpdatedAsync = DisplayResultAsync,
	};

    public async Task<bool> ShouldIgnorePhysicalKeyPresses()
    {
        return await JS.InvokeAsync<bool>("document.activeElement.classList.contains", "disable-physical-keypress-math-input-when-focused");
    }

    private StandardLeafNode GetMultiplicationNode() => new StandardLeafNode(multiplicationSymbolSetting);
    private DecimalSeparatorNode GetDecimalSeparatorNode() => new DecimalSeparatorNode(decimalSeparatorSetting);
    private static BranchingNode GetFractionNode() => new DescendingBranchingNode(@"\frac{", "}{", "}");
    private static BranchingNode GetBinomialNode() => new DescendingBranchingNode(@"\binom{", "}{", "}");
    private static BranchingNode GetPowerNode() => new AscendingBranchingNode("", "^{", "}");
    private static BranchingNode GetSubscriptNode() => new DescendingBranchingNode("", "_{", "}");
    private static BranchingNode GetSquareRootNode() => new StandardBranchingNode(@"\sqrt{", "}");
    private static BranchingNode GetNthRootNode() => new DescendingBranchingNode(@"\sqrt[", "]{", "}");
    private static BranchingNode GetPipesNode() => new StandardBranchingNode(@"\left|", @"\right|");
    private static BranchingNode GetDoublePipesNode() => new StandardBranchingNode(@"\left\|", @"\right\|");
    private static BranchingNode GetCurlyBracketsNode() => new StandardBranchingNode(@"\left\{", @"\right\}");
    private static BranchingNode GetSquareBracketsNode() => new StandardBranchingNode(@"\left[", @"\right]");
    private static BranchingNode GetIntegralNode() => new AscendingBranchingNode(@"\int_{", "}^{", "}");
    private static BranchingNode GetSumNode() => new AscendingBranchingNode(@"\sum_{", "}^{", "}");
    private static BranchingNode GetProductNode() => new AscendingBranchingNode(@"\prod_{", "}^{", "}");
    private static BranchingNode GetLimitNode() => new StandardBranchingNode(@"\lim_{", "}");

    private async Task ToggleSelectionMode()
    {
        if (_keyboardMemory.InSelectionMode())
        {
            _keyboardMemory.LeaveSelectionMode();
        }
        else
        {
            _keyboardMemory.EnterSelectionMode();
        }
        await DisplayResultAsync();
    }

    private async Task DeleteKeyClicked()
    {
        if (_keyboardMemory.InSelectionMode())
        {
            _keyboardMemory.DeleteSelection();
        }
        else
        {
            _keyboardMemory.DeleteLeft();
        }

        await DisplayResultAsync();
    }

    private async Task MoveUpClicked() 
    {
        if (_keyboardMemory.InSelectionMode())
        {
            _keyboardMemory.LeaveSelectionMode();
        }
        _keyboardMemory.MoveUp();
        await DisplayResultAsync();
    }

    private async Task MoveLeftClicked()
    {
        if (_keyboardMemory.InSelectionMode() || inShift)
        {
            _keyboardMemory.SelectLeft();
        }
        else
        {
            _keyboardMemory.MoveLeft();
        }
        await DisplayResultAsync();
    }

    private async Task MoveDownClicked() 	
    {
        if (_keyboardMemory.InSelectionMode())
        {
            _keyboardMemory.LeaveSelectionMode();
        }
        _keyboardMemory.MoveDown();
        await DisplayResultAsync();
    }

    private async Task MoveRightClicked() 
    {
        if (_keyboardMemory.InSelectionMode() || inShift)
        {
            _keyboardMemory.SelectRight();
        }
        else
        {
            _keyboardMemory.MoveRight();
        }
        await DisplayResultAsync();
    }

    private async Task RenderLatexInKeyAsync(TreeNode node, ElementReference key)
    {
        await JS.InvokeVoidAsync("katex.render", node.GetViewModeLatex(_latexConfiguration), key, new { throwOnError = false});
    }

    private string viewModeLatex = "";
    private ElementReference typesetEditModeLatex;
    private async Task DisplayResultAsync()
    {
        if (_keyboardMemory.Current is Placeholder p && p.Nodes.Count == 0)
        {
            _latexConfiguration.ActivePlaceholderShape = @"\blacksquare";
        }
        else
        {
            _latexConfiguration.ActivePlaceholderShape = "|";
        }
        var editModeLatex = _keyboardMemory.GetEditModeLatex(_latexConfiguration);
        await JS.InvokeVoidAsync("katex.render", @$"\displaystyle {editModeLatex}", typesetEditModeLatex, new { throwOnError = false});
        viewModeLatex = _keyboardMemory.GetViewModeLatex(_latexConfiguration);
        StateHasChanged();
    }

    public Task OnPhysicalKeyUp(string key)
    {
        if (key.StartsWith("Shift"))
        {
            inShift = false;
        }
        return Task.CompletedTask;
    }

    private string pureLatex = "";
    private bool inShift = false;
    public async Task OnPhysicalKeyDownAsync(string key)
    {
        if (await ShouldIgnorePhysicalKeyPresses())
        {
            return;
        }
        else if (key.StartsWith("Shift"))
        {
            inShift = true;
        }
        else if (_keyboardMemory.InSelectionMode())
        {
            if (key == "ArrowLeft")
            {
                _keyboardMemory.SelectLeft();
            }
            else if (key == "ArrowRight")
            {
                _keyboardMemory.SelectRight();
            }
            else if (inShift)
            {
                var handler = SelectionModePhysicalKeydownHandlersForShift.FirstOrDefault(x => x.CanHandle(key));
                if (handler != null)
                {
                    handler?.Handle(_keyboardMemory, key);
                    _keyboardMemory.LeaveSelectionMode();
                }
                else
                {
                    _keyboardMemory.LeaveSelectionMode();
                    PhysicalKeydownHandlersForShift.FirstOrDefault(x => x.CanHandle(key))?.Handle(_keyboardMemory, key);
                }
            }
            else
            {
                var handler = SelectionModePhysicalKeydownHandlersNoShift.FirstOrDefault(x => x.CanHandle(key));
                if (handler != null)
                {
                    handler?.Handle(_keyboardMemory, key);
                    _keyboardMemory.LeaveSelectionMode();
                }
                else
                {
                    _keyboardMemory.LeaveSelectionMode();
                    PhysicalKeydownHandlersNoShift.FirstOrDefault(x => x.CanHandle(key))?.Handle(_keyboardMemory, key);
                }
            }
        }
        else
        {
            if (!inShift && key == "Backslash")
            {
                pureLatex = @"\";
            }
            else if (pureLatex.Length > 0)
            {
                var roundBracketsRequested = key == "Digit9" && inShift;
                if (roundBracketsRequested || key == "Space" || key == "Enter" || key == "Escape")
                {
                    var node = (TreeNode)(
                        pureLatex == @"\frac" ? GetFractionNode()
                        : pureLatex == @"\binom" ? GetBinomialNode()
                        : pureLatex == @"\sqrt" ? GetSquareRootNode()
                        : pureLatex == @"\int" ? GetIntegralNode()
                        : pureLatex == @"\sum" ? GetSumNode()
                        : pureLatex == @"\prod" ? GetProductNode()
                        : pureLatex == @"\lim" ? GetLimitNode()
                        : new StandardLeafNode(pureLatex));
                    _keyboardMemory.Insert(node);
                    if (roundBracketsRequested)
                    {
                        _keyboardMemory.Insert(new RoundBracketsNode());
                    }
                    pureLatex = "";
				}
				else if (key == "Backspace")
				{
					pureLatex = pureLatex.Substring(0, pureLatex.Length - 1);
				}
				else if (key.StartsWith("Key"))
				{
					if (inShift)
					{
						pureLatex += key[3];
					}
					else
					{
						pureLatex += key[3].ToString().ToLower();
					}
				}
			}
			else if (inShift)
			{
				PhysicalKeydownHandlersForShift.FirstOrDefault(x => x.CanHandle(key))?.Handle(_keyboardMemory, key);
			}
			else
			{
				PhysicalKeydownHandlersNoShift.FirstOrDefault(x => x.CanHandle(key))?.Handle(_keyboardMemory, key);
			}
		}

		await DisplayResultAsync();
	}

	public IEnumerable<PhysicalKeyHandler> PhysicalKeydownHandlersForShift
	{
		get
		{
			yield return new PhysicalKeyHandler("Digit6", (k, key) => k.InsertWithEncapsulateCurrent(GetPowerNode()));
			yield return new PhysicalKeyHandler("Digit9", (k, key) => k.Insert(new RoundBracketsNode()));
			yield return new PhysicalKeyHandler("Digit0", (k, key) => k.MoveRight());
			yield return new PhysicalKeyHandler("Digit8", (k, key) => k.Insert(GetMultiplicationNode()));
			yield return new PhysicalKeyHandler("Equal", (k, key) => k.Insert(new StandardLeafNode("+")));
			yield return new PhysicalKeyHandler("Minus", (k, key) => k.InsertWithEncapsulateCurrent(GetSubscriptNode()));
			yield return new PhysicalKeyHandler("Digit1", (k, key) => k.Insert(new StandardLeafNode("!")));
			yield return new PhysicalKeyHandler("Digit5", (k, key) => k.Insert(new StandardLeafNode(@"\%")));
			yield return new PhysicalKeyHandler((key) => key.StartsWith("Key"), (k, key) => k.Insert(new StandardLeafNode(key[3].ToString())));
			yield return new PhysicalKeyHandler("ArrowLeft", (k, key) => k.SelectLeft());
			yield return new PhysicalKeyHandler("ArrowRight", (k, key) => k.SelectRight());
			yield return new PhysicalKeyHandler("Backslash", (k, key) => k.Insert(GetPipesNode()));
			yield return new PhysicalKeyHandler("BracketLeft", (k, key) => k.Insert(GetCurlyBracketsNode()));
			yield return new PhysicalKeyHandler("BracketRight", (k, key) => k.MoveRight());
			yield return new PhysicalKeyHandler("Comma", (k, key) => k.Insert(new StandardLeafNode("<")));
			yield return new PhysicalKeyHandler("Period", (k, key) => k.Insert(new StandardLeafNode(">")));
			yield return new PhysicalKeyHandler("Semicolon", (k, key) => k.Insert(new StandardLeafNode(":")));
		}
	}

	public IEnumerable<PhysicalKeyHandler> PhysicalKeydownHandlersNoShift
	{
		get
		{
			yield return new PhysicalKeyHandler((key) => key.StartsWith("Digit"), (k, key) => k.Insert(new DigitNode(key[5].ToString())));
			yield return new PhysicalKeyHandler((key) => key.StartsWith("Key"), (k, key) => k.Insert(new StandardLeafNode(key[3].ToString().ToLower())));
			yield return new PhysicalKeyHandler("Backspace", (k, key) => k.DeleteLeft());
            yield return new PhysicalKeyHandler("Delete", (k, key) => k.DeleteRight());
			yield return new PhysicalKeyHandler("ArrowLeft", (k, key) => k.MoveLeft());
			yield return new PhysicalKeyHandler("ArrowRight", (k, key) => k.MoveRight());
			yield return new PhysicalKeyHandler("ArrowUp", (k, key) => k.MoveUp());
			yield return new PhysicalKeyHandler("ArrowDown", (k, key) => k.MoveDown());
			yield return new PhysicalKeyHandler("Slash", (k, key) => k.InsertWithEncapsulateCurrent(GetFractionNode(), InsertWithEncapsulateCurrentOptions.DeleteOuterRoundBracketsIfAny));
			yield return new PhysicalKeyHandler("Equal", (k, key) => k.Insert(new StandardLeafNode("=")));
			yield return new PhysicalKeyHandler("Minus", (k, key) => k.Insert(new StandardLeafNode("-")));
			yield return new PhysicalKeyHandler((key) => key == "Period" || key == "Comma", (k, key) => k.Insert(GetDecimalSeparatorNode()));
			yield return new PhysicalKeyHandler("BracketLeft", (k, key) => k.Insert(GetSquareBracketsNode()));
			yield return new PhysicalKeyHandler("BracketRight", (k, key) => k.MoveRight());
		}
	}

	public IEnumerable<PhysicalKeyHandler> SelectionModePhysicalKeydownHandlersForShift
	{ 
		get
		{
			yield return new PhysicalKeyHandler("Digit6", (k, key) => k.InsertWithEncapsulateSelectionAndPrevious(GetPowerNode()));
			yield return new PhysicalKeyHandler("BracketLeft", (k, key) => k.InsertWithEncapsulateSelection(GetCurlyBracketsNode()));
			yield return new PhysicalKeyHandler("Backslash", (k, key) => k.InsertWithEncapsulateSelection(GetPipesNode()));
			yield return new PhysicalKeyHandler("Digit9", (k, key) => k.InsertWithEncapsulateSelection(new RoundBracketsNode()));
		}
	}

	public IEnumerable<PhysicalKeyHandler> SelectionModePhysicalKeydownHandlersNoShift
	{
		get
		{
			yield return new PhysicalKeyHandler("Backspace", (k, key) => k.DeleteSelection());
            yield return new PhysicalKeyHandler("Delete", (k, key) => k.DeleteSelection());
			yield return new PhysicalKeyHandler("BracketLeft", (k, key) => k.InsertWithEncapsulateSelection(GetSquareBracketsNode()));
			yield return new PhysicalKeyHandler("Slash", (k, key) => k.InsertWithEncapsulateSelection(GetFractionNode()));
		}
	}
}

<style>
:root {
    --selection-mode-color: @(_colorScheme.SelectionModeColor);
}

@if (_colorScheme.Preference == ColorScheme.PreferenceType.Dark)
{
	@((MarkupString)@"body {
		background-color: black;
		color: white;
	}");
}

html {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
	user-select: none; /* supported by Chrome and Opera */
    -webkit-user-select: none; /* Safari */
    -khtml-user-select: none; /* Konqueror HTML */
    -moz-user-select: none; /* Firefox */
    -ms-user-select: none; /* Internet Explorer/Edge */
}

h1 {
    font-size: 1.5rem;
}

input {
    font-size: 1rem;
    width: 2.5rem;
}

#typesetEditModeLatex {
    border: 1px solid gray;
    padding: 0.25rem;
    min-height: 2.5rem;
}

#viewModeLatex {
    text-align: right;
}

#mathKeyboard > * {
    display: inline-block;
    border: 1px solid gray;
    padding: 0.25rem;
    margin: 1px;
    min-width: 1.5rem;
    min-height: 1.5rem;
    vertical-align: middle;
    text-align: center;
    cursor: default;
    user-select: none;
    outline: 0;
}

.inSelectionMode {
    background-color: var(--selection-mode-color);
}

#selectionModeToggle {
    background-color: var(--selection-mode-color);
}

#settingsContainer {
    display: none;
    text-align: left;
}

.setting {
    margin: 1rem;
    cursor: default;
}

.setting-value {
    border: 1px solid gray;
    padding: 0.15rem;
}

#pureLatexFromPhysicalKeys {
    color: green;
}

</style>
