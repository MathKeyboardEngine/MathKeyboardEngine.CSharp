@page "/"
@using MathKeyboardEngine
@inject IJSRuntime JS
@*
	Notes:
	- This example uses a custom Component called "VirtualKey" to avoid duplication, which requires an-also-custom-made "MathTextboxInfo" (which contains the KeyboardMemory (think "styntax tree") for a single "math textbox", so that a VirtualKey can be reused for multiple textboxes).
	- The "decimalSeparatorSetting" and "multiplicationSymbolSetting" change at a random moment.
*@

<PageTitle>MathKeyboardEngine + KaTeX (in a Blazor WebAssembly App)</PageTitle>

<h1>MathKeyboardEngine + KaTeX (in a Blazor WebAssembly App)</h1>

<div id="typesetEditModeLatex" @ref=typesetEditModeLatex></div>
<div id="pureLatexFromPhysicalKeys">@pureLatex</div>
<div id="viewModeLatex">@viewModeLatex</div>
<i>Example keys - to be styled - to help you design your virtual math keyboard</i>
<div id="mathKeyboard">
	<div @onclick=ToggleSelectionMode id="selectionModeToggle"></div>
	<div @onclick=MoveUpClicked>&#x25B2;</div>
	<div @onclick=DeleteKeyClicked class="@CssHelper.GetSelectionModeClass(_keyboardMemory)">&#128293;</div>
	<br />
	<div @onclick=MoveLeftClicked class="@CssHelper.GetSelectionModeClass(_keyboardMemory)">&#x25C0;</div>
	<div @onclick=MoveDownClicked>&#x25BC;</div>
	<div @onclick=MoveRightClicked class="@CssHelper.GetSelectionModeClass(_keyboardMemory)">&#x25B6;</div>
	<br />
	@for (int i = 0; i < 10; i++)
	{
		var digit = i;
		<VirtualKey GetTreeNode="() => new DigitNode(digit.ToString())" GetMathTextboxInfo="GetMathTextboxInfo"></VirtualKey>
	}
	<VirtualKey GetTreeNode="() => new DecimalSeparatorNode(decimalSeparatorSetting)" GetMathTextboxInfo="GetMathTextboxInfo"></VirtualKey>
	<br />
	@foreach(var letter in new[] { "a", "b", "c", "x", "y", "z", @"\alpha", @"\beta", @"\gamma", @"\lambda", @"\mu", @"\pi" })
	{
		<VirtualKey GetTreeNode="() => new StandardLeafNode(letter)" GetMathTextboxInfo="GetMathTextboxInfo"></VirtualKey>
	}
	<br/>
	@foreach(var op in new[] { @"\pm", "+", "-", })
	{
		<VirtualKey GetTreeNode="() => new StandardLeafNode(op)" GetMathTextboxInfo="GetMathTextboxInfo"></VirtualKey>
	}
	<VirtualKey GetTreeNode="GetMultiplicationNode" GetMathTextboxInfo="GetMathTextboxInfo"></VirtualKey>
	@foreach(var op in new[] { ":", @"\div", "!", })
	{
		<VirtualKey GetTreeNode="() => new StandardLeafNode(op)" GetMathTextboxInfo="GetMathTextboxInfo"></VirtualKey>
	}
	<br/>
	<VirtualKey GetTreeNode="GetBinomialNode" GetMathTextboxInfo="GetMathTextboxInfo"></VirtualKey>
	<VirtualKey GetTreeNode="GetFractionNode" SelectionModeInsertAction="(k, node) => k.InsertWithEncapsulateSelection(node)" GetMathTextboxInfo="GetMathTextboxInfo"></VirtualKey>
	<VirtualKey GetTreeNode="GetPowerNode" SelectionModeInsertAction="(k, node) => k.InsertWithEncapsulateSelectionAndPrevious(node)" InsertAction="(k, node) => k.InsertWithEncapsulateCurrent((BranchingNode)node)" GetMathTextboxInfo="GetMathTextboxInfo"></VirtualKey>
	<VirtualKey GetTreeNode="GetSubscriptNode" SelectionModeInsertAction="(k, node) => k.InsertWithEncapsulateSelectionAndPrevious(node)" InsertAction="(k, node) => k.InsertWithEncapsulateCurrent((BranchingNode)node)" GetMathTextboxInfo="GetMathTextboxInfo"></VirtualKey>
	<VirtualKey GetTreeNode="GetSquareRootNode" SelectionModeInsertAction="(k, node) => k.InsertWithEncapsulateSelection(node)" GetMathTextboxInfo="GetMathTextboxInfo"></VirtualKey>
	<VirtualKey GetTreeNode="GetNthRootNode" GetMathTextboxInfo="GetMathTextboxInfo"></VirtualKey>

</div>
<div class="footer">
	<a href="https://github.com/MathKeyboardEngine/MathKeyboardEngine.CSharp">View on GitHub</a>
</div>

@code {
	private KeyboardMemory _keyboardMemory = new KeyboardMemory();
	private LatexConfiguration _latexConfiguration  = new LatexConfiguration
	{
		SelectionHightlightStart = @"\colorbox{" + CssHelper.SelectionModeColor + @"}{\(\displaystyle",
		SelectionHightlightEnd = @"\)}",
	};
	private static Func<string> decimalSeparatorSetting = () => DateTime.Now.Second % 2 == 0 ? "." : "{,}";
	private static Func<string> multiplicationSymbolSetting = () => DateTime.Now.Second % 2 == 0 ? @"\times" : @"\cdot";

	public MathTextboxInfo GetMathTextboxInfo() => new MathTextboxInfo
	{
		KeyboardMemory = _keyboardMemory,
		LatexConfiguration = _latexConfiguration,
		AfterKeyboardMemoryUpdatedAsync = DisplayResultAsync,
	};

	ElementReference typesetEditModeLatex;

	private string viewModeLatex = "";
	private string pureLatex = "";

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await DisplayResultAsync();
			DocumentEvents.OnPhysicalKeyDownHandler = OnPhysicalKeyDown;
			DocumentEvents.OnPhysicalKeyUpHandler = OnPhysicalKeyUp;
		}
	}

	private static BranchingNode GetFractionNode() => new DescendingBranchingNode(@"\frac{", "}{", "}");
	private static BranchingNode GetBinomialNode() => new DescendingBranchingNode(@"\binom{", "}{", "}");
	private static BranchingNode GetPowerNode() => new AscendingBranchingNode("", "^{", "}");
	private static BranchingNode GetSubscriptNode() => new DescendingBranchingNode("", "_{", "}");
	private static BranchingNode GetSquareRootNode() => new StandardBranchingNode(@"\sqrt{", "}");
	private static BranchingNode GetNthRootNode() => new DescendingBranchingNode(@"\sqrt[", "]{", "}");
	private static BranchingNode GetPipesNode() => new StandardBranchingNode(@"\left|", @"\right|");
	private static BranchingNode GetCurlyBracketsNode() => new StandardBranchingNode(@"\left\{", @"\right\}");
	private static BranchingNode GetSquareBracketsNode() => new StandardBranchingNode(@"\left[", @"\right]");
	private static Func<StandardLeafNode> GetMultiplicationNode = () => new StandardLeafNode(multiplicationSymbolSetting);
	private static Func<DecimalSeparatorNode> GetDecimalSeparatorNode = () => new DecimalSeparatorNode(decimalSeparatorSetting);

	private async Task ToggleSelectionMode()
	{
		if (_keyboardMemory.InSelectionMode())
		{
			_keyboardMemory.LeaveSelectionMode();
		}
		else
		{
			_keyboardMemory.EnterSelectionMode();
		}
		await DisplayResultAsync();
	}

	private async Task DeleteKeyClicked()
	{
		if (_keyboardMemory.InSelectionMode())
		{
			_keyboardMemory.DeleteSelection();
		}
		else
		{
			_keyboardMemory.DeleteCurrent();
		}

		await DisplayResultAsync();
	}

	private async Task MoveUpClicked() 
	{
		if (_keyboardMemory.InSelectionMode())
		{
			_keyboardMemory.LeaveSelectionMode();
		}
		_keyboardMemory.MoveUp();
		await DisplayResultAsync();
	}

	private async Task MoveLeftClicked()
	{
		if (_keyboardMemory.InSelectionMode())
		{
			_keyboardMemory.SelectLeft();
		}
		else
		{
			_keyboardMemory.MoveLeft();
		}
		await DisplayResultAsync();
	}

	private async Task MoveDownClicked() 	
	{
		if (_keyboardMemory.InSelectionMode())
		{
			_keyboardMemory.LeaveSelectionMode();
		}
		_keyboardMemory.MoveDown();
		await DisplayResultAsync();
	}

	private async Task MoveRightClicked() 
	{
		if (_keyboardMemory.InSelectionMode())
		{
			_keyboardMemory.SelectRight();
		}
		else
		{
			_keyboardMemory.MoveRight();
		}
		await DisplayResultAsync();
	}

	private async Task RenderLatexInKeyAsync(TreeNode node, ElementReference key)
	{
		await JS.InvokeVoidAsync("katex.render", node.GetViewModeLatex(_latexConfiguration), key, new { throwOnError = false});
	}

	private async Task DisplayResultAsync()
	{
		var editModeLatex = _keyboardMemory.GetEditModeLatex(_latexConfiguration);
		await JS.InvokeVoidAsync("katex.render", @$"\displaystyle {editModeLatex}", typesetEditModeLatex, new { throwOnError = false});
		viewModeLatex = _keyboardMemory.GetViewModeLatex(_latexConfiguration);
		StateHasChanged();
	}

	public async Task OnPhysicalKeyUp(string key)
	{
		Console.WriteLine("Hello from instance UP: " + key);
		if (key.StartsWith("Shift"))
		{
			inShift = false;
		}
		else if (key == "ControlLeft")
		{
			if (_keyboardMemory.InSelectionMode())
			{
				_keyboardMemory.LeaveSelectionMode();
			}
			else
			{
				_keyboardMemory.EnterSelectionMode();
			}
			await DisplayResultAsync();
		}
	}

	private bool inShift = false;
	public async Task OnPhysicalKeyDown(string key)
	{
		Console.WriteLine("Hello from instance DOWN: " + key);
		if (key.StartsWith("Shift"))
		{
			inShift = true;
		}
		else if (key == "ControlLeft")
		{
			return;
		}
		else if (_keyboardMemory.InSelectionMode())
		{
			if (key == "ArrowLeft")
			{
				_keyboardMemory.SelectLeft();
			}
			else if (key == "ArrowRight")
			{
				_keyboardMemory.SelectRight();
			}
			else if (inShift)
			{
				var handler = SelectionModePhysicalKeydownHandlersForShift.Value.FirstOrDefault(x => x.CanHandle(key));
				if (handler != null)
				{
					handler?.Handle(_keyboardMemory, key);
					_keyboardMemory.LeaveSelectionMode();
				}
				else
				{
					_keyboardMemory.LeaveSelectionMode();
					PhysicalKeydownHandlersForShift.Value.FirstOrDefault(x => x.CanHandle(key))?.Handle(_keyboardMemory, key);
				}
			}
			else
			{
				var handler = SelectionModePhysicalKeydownHandlersNoShift.Value.FirstOrDefault(x => x.CanHandle(key));
				if (handler != null)
				{
					handler?.Handle(_keyboardMemory, key);
					_keyboardMemory.LeaveSelectionMode();
				}
				else
				{
					PhysicalKeydownHandlersNoShift.Value.FirstOrDefault(x => x.CanHandle(key))?.Handle(_keyboardMemory, key);
				}
			}
		}
		else
		{
          if (!inShift && key == "Backslash") {
            pureLatex = @"\";
          } else if (pureLatex.Length > 0) {
            if (key == "Space" || key == "Enter" || key == "Escape") {
              var node = (TreeNode)(
                pureLatex == @"\frac"
                  ? GetFractionNode()
                  : pureLatex == @"\binom"
                  ? GetBinomialNode()
                  : pureLatex == @"\sqrt"
                  ? GetSquareRootNode()
                  : new StandardLeafNode(pureLatex));
              _keyboardMemory.Insert(node);
              pureLatex = "";
            } else if (key == "Backspace") {
              pureLatex = pureLatex.Substring(0, pureLatex.Length - 1);
            } else if (key.StartsWith("Key")) {
              if (inShift) {
                pureLatex += key[3];
              } else {
                pureLatex += key[3].ToString().ToLower();
              }
            }
          } else if (inShift)
			{
				PhysicalKeydownHandlersForShift.Value.FirstOrDefault(x => x.CanHandle(key))?.Handle(_keyboardMemory, key);
			}
			else
			{
				PhysicalKeydownHandlersNoShift.Value.FirstOrDefault(x => x.CanHandle(key))?.Handle(_keyboardMemory, key);
			}
		}

		await DisplayResultAsync();
	}
	public Lazy<PhysicalKeyHandler[]> PhysicalKeydownHandlersForShift = new Lazy<PhysicalKeyHandler[]>(() => new PhysicalKeyHandler[]
	{
		new PhysicalKeyHandler("Digit6", (k, key) => k.InsertWithEncapsulateCurrent(GetPowerNode())),
		new PhysicalKeyHandler("Digit9", (k, key) => k.Insert(new RoundBracketsNode())),
		new PhysicalKeyHandler("Digit0", (k, key) => k.MoveRight()),
		new PhysicalKeyHandler("Digit8", (k, key) => k.Insert(GetMultiplicationNode())),
		new PhysicalKeyHandler("Equal", (k, key) => k.Insert(new StandardLeafNode("+"))),
		new PhysicalKeyHandler("Minus", (k, key) => k.InsertWithEncapsulateCurrent(GetSubscriptNode())),
		new PhysicalKeyHandler("Digit1", (k, key) => k.Insert(new StandardLeafNode("!"))),
		new PhysicalKeyHandler("Digit5", (k, key) => k.Insert(new StandardLeafNode(@"\%"))),
		new PhysicalKeyHandler((key) => key.StartsWith("Key"), (k, key) => k.Insert(new StandardLeafNode(key[3].ToString()))),
		new PhysicalKeyHandler("Backslash", (k, key) => k.Insert(GetPipesNode())),
		new PhysicalKeyHandler("BracketLeft", (k, key) => k.Insert(GetCurlyBracketsNode())),
		new PhysicalKeyHandler("BracketRight", (k, key) => k.MoveRight()),
		new PhysicalKeyHandler("Comma", (k, key) => k.Insert(new StandardLeafNode("<"))),
		new PhysicalKeyHandler("Period", (k, key) => k.Insert(new StandardLeafNode(">"))),
		new PhysicalKeyHandler("Semicolon", (k, key) => k.Insert(new StandardLeafNode(":")))
	});

	public Lazy<PhysicalKeyHandler[]> PhysicalKeydownHandlersNoShift = new Lazy<PhysicalKeyHandler[]>(() => new PhysicalKeyHandler[]
	{
        new PhysicalKeyHandler((key) => key.StartsWith("Digit"), (k, key) => k.Insert(new DigitNode(key[5].ToString()))),
        new PhysicalKeyHandler((key) => key.StartsWith("Key"), (k, key) => k.Insert(new StandardLeafNode(key[3].ToString().ToLower()))),
        new PhysicalKeyHandler("Backspace", (k, key) => k.DeleteCurrent()),
        new PhysicalKeyHandler("ArrowLeft", (k, key) => k.MoveLeft()),
        new PhysicalKeyHandler("ArrowRight", (k, key) => k.MoveRight()),
        new PhysicalKeyHandler("ArrowUp", (k, key) => k.MoveUp()),
        new PhysicalKeyHandler("ArrowDown", (k, key) => k.MoveDown()),
        new PhysicalKeyHandler("Slash", (k, key) => k.InsertWithEncapsulateCurrent(GetFractionNode(), InsertWithEncapsulateCurrentMethod.Options.DeleteOuterRoundBracketsIfAny)),
        new PhysicalKeyHandler("Equal", (k, key) => k.Insert(new StandardLeafNode("="))),
        new PhysicalKeyHandler("Minus", (k, key) => k.Insert(new StandardLeafNode("-"))),
        new PhysicalKeyHandler((key) => key == "Period" || key == "Comma", (k, key) => k.Insert(GetDecimalSeparatorNode())),
        new PhysicalKeyHandler("BracketLeft", (k, key) => k.Insert(GetSquareBracketsNode())),
        new PhysicalKeyHandler("BracketRight", (k, key) => k.MoveRight())
	});

	public Lazy<PhysicalKeyHandler[]> SelectionModePhysicalKeydownHandlersForShift = new Lazy<PhysicalKeyHandler[]>(() => new PhysicalKeyHandler[]
	{
        new PhysicalKeyHandler("Digit6", (k, key) => k.InsertWithEncapsulateSelectionAndPrevious(GetPowerNode())),
        new PhysicalKeyHandler("BracketLeft", (k, key) => k.InsertWithEncapsulateSelection(GetCurlyBracketsNode())),
        new PhysicalKeyHandler("Backslash", (k, key) => k.InsertWithEncapsulateSelection(GetPipesNode())),
        new PhysicalKeyHandler("Digit9", (k, key) => k.InsertWithEncapsulateSelection(new RoundBracketsNode()))
    });

	public Lazy<BlazorWebAssemblyAppWithKatex.PhysicalKeyHandler[]> SelectionModePhysicalKeydownHandlersNoShift = new Lazy<BlazorWebAssemblyAppWithKatex.PhysicalKeyHandler[]>(() => new BlazorWebAssemblyAppWithKatex.PhysicalKeyHandler[]
    {
		new BlazorWebAssemblyAppWithKatex.PhysicalKeyHandler("Backspace", (k, key) => k.DeleteSelection()),
        new BlazorWebAssemblyAppWithKatex.PhysicalKeyHandler("BracketLeft", (k, key) => k.InsertWithEncapsulateSelection(GetSquareBracketsNode())),
        new BlazorWebAssemblyAppWithKatex.PhysicalKeyHandler("Slash", (k, key) => k.InsertWithEncapsulateSelection(GetFractionNode()))
    });
}

<style>
	:root {
    --selection-mode-color: @(CssHelper.SelectionModeColor);
}

.dark {
    background-color: black;
    color: white;
}

html {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}

h1 {
    font-size: 1.5rem;
}

input {
    font-size: 1rem;
    width: 2.5rem;
}

#typesetEditModeLatex {
    border: 1px solid gray;
    padding: 0.25rem;
    min-height: 2.5rem;
}

#viewModeLatex {
    text-align: right;
}

#mathKeyboard > * {
    display: inline-block;
    border: 1px solid gray;
    padding: 0.25rem;
    margin: 1px;
    min-width: 1.5rem;
    min-height: 1.5rem;
    vertical-align: middle;
    text-align: center;
    cursor: default;
    user-select: none;
    outline: 0;
}

.inSelectionMode {
    background-color: var(--selection-mode-color);
}

#selectionModeToggle {
    background-color: var(--selection-mode-color);
}

#settingsContainer {
    display: none;
    text-align: left;
}

.setting {
    margin: 1rem;
    cursor: default;
}

.setting-value {
    border: 1px solid gray;
    padding: 0.15rem;
}

.footer {
    text-align: center;
    margin: 15px;
}

a {
    color: #58a6ff;
    text-decoration: none;
    border: 1px solid #58a6ff;
    padding: 0.25rem;
}

#pureLatexFromPhysicalKeys {
    color: green;
}

</style>
