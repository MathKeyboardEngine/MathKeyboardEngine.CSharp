@page "/"
@inject IJSRuntime JS
@*
	Notes:
	- Because the namespace of this project starts with "MathKeyboardEngine", this examples skips the following using: `@using MathKeyboardEngine`.
	- This example uses a custom Component called "VirtualKey" to avoid duplication, which requires an-also-custom-made "MathTextboxInfo" (which contains the KeyboardMemory (think "styntax tree") for a single "math textbox", so that a VirtualKey can be reused for multiple textboxes).
	- The "decimalSeparatorSetting" and "multiplicationSymbolSetting" change at a random moment.
*@

<PageTitle>MathKeyboardEngine + KaTeX (in a Blazor WebAssembly App)</PageTitle>

<h1>MathKeyboardEngine + KaTeX (in a Blazor WebAssembly App)</h1>

<div id="pureLatexFromPhysicalKeys"></div>
<div id="typesetEditModeLatex" @ref=typesetEditModeLatex></div>
<div id="viewModeLatex">@viewModeLatex</div>
<i>Example keys - to be styled - to help you design your virtual math keyboard</i>
<div id="mathKeyboard">
	<div @onclick=ToggleSelectionMode id="selectionModeToggle"></div>
	<div @onclick=MoveUpClicked>&#x25B2;</div>
	<div @onclick=DeleteKeyClicked class="@CssHelper.GetSelectionModeClass(_keyboardMemory)">&#128293;</div>
	<br />
	<div @onclick=MoveLeftClicked class="@CssHelper.GetSelectionModeClass(_keyboardMemory)">&#x25C0;</div>
	<div @onclick=MoveDownClicked>&#x25BC;</div>
	<div @onclick=MoveRightClicked class="@CssHelper.GetSelectionModeClass(_keyboardMemory)">&#x25B6;</div>
	<br />
	@for (int i = 0; i < 10; i++)
	{
		var digit = i;
		<VirtualKey GetTreeNode="() => new DigitNode(digit.ToString())" GetMathTextboxInfo="GetMathTextboxInfo"></VirtualKey>
	}
	<VirtualKey GetTreeNode="() => new DecimalSeparatorNode(decimalSeparatorSetting)" GetMathTextboxInfo="GetMathTextboxInfo"></VirtualKey>
	<br />
	@foreach(var letter in new[] { "a", "b", "c", "x", "y", "z", @"\alpha", @"\beta", @"\gamma", @"\lambda", @"\mu", @"\pi" })
	{
		<VirtualKey GetTreeNode="() => new StandardLeafNode(letter)" GetMathTextboxInfo="GetMathTextboxInfo"></VirtualKey>
	}
	<br/>
	@foreach(var op in new[] { @"\pm", "+", "-", })
	{
		<VirtualKey GetTreeNode="() => new StandardLeafNode(op)" GetMathTextboxInfo="GetMathTextboxInfo"></VirtualKey>
	}
	<VirtualKey GetTreeNode="() => new StandardLeafNode(multiplicationSymbolSetting)" GetMathTextboxInfo="GetMathTextboxInfo"></VirtualKey>
	@foreach(var op in new[] { ":", @"\div", "!", })
	{
		<VirtualKey GetTreeNode="() => new StandardLeafNode(op)" GetMathTextboxInfo="GetMathTextboxInfo"></VirtualKey>
	}
	<br/>
	<VirtualKey GetTreeNode="GetBinomialNode" GetMathTextboxInfo="GetMathTextboxInfo"></VirtualKey>
	<VirtualKey GetTreeNode="GetFractionNode" SelectionModeInsertAction="(k, node) => k.InsertWithEncapsulateSelection(node)" GetMathTextboxInfo="GetMathTextboxInfo"></VirtualKey>
	<VirtualKey GetTreeNode="GetPowerNode" SelectionModeInsertAction="(k, node) => k.InsertWithEncapsulateSelectionAndPrevious(node)" InsertAction="(k, node) => k.InsertWithEncapsulateCurrent((BranchingNode)node)" GetMathTextboxInfo="GetMathTextboxInfo"></VirtualKey>
	<VirtualKey GetTreeNode="GetSubscriptNode" SelectionModeInsertAction="(k, node) => k.InsertWithEncapsulateSelectionAndPrevious(node)" InsertAction="(k, node) => k.InsertWithEncapsulateCurrent((BranchingNode)node)" GetMathTextboxInfo="GetMathTextboxInfo"></VirtualKey>
	<VirtualKey GetTreeNode="GetSquareRootNode" SelectionModeInsertAction="(k, node) => k.InsertWithEncapsulateSelection(node)" GetMathTextboxInfo="GetMathTextboxInfo"></VirtualKey>
	<VirtualKey GetTreeNode="GetNthRootNode" GetMathTextboxInfo="GetMathTextboxInfo"></VirtualKey>

</div>
<div class="footer">
	<a href="https://github.com/MathKeyboardEngine/MathKeyboardEngine.CSharp">View on GitHub</a>
</div>

@code {
	public readonly KeyboardMemory _keyboardMemory = new KeyboardMemory();
	public readonly LatexConfiguration _latexConfiguration  = new LatexConfiguration
	{
		SelectionHightlightStart = @"\colorbox{" + CssHelper.SelectionModeColor + @"}{\(\displaystyle",
		SelectionHightlightEnd = @"\)}",
	};
	public Func<string> decimalSeparatorSetting = () => DateTime.Now.Second % 2 == 0 ? "." : "{,}";
	public Func<string> multiplicationSymbolSetting = () => DateTime.Now.Second % 2 == 0 ? @"\times" : @"\cdot";

	public MathTextboxInfo GetMathTextboxInfo() => new MathTextboxInfo
	{
		KeyboardMemory = _keyboardMemory,
		LatexConfiguration = _latexConfiguration,
		AfterKeyboardMemoryUpdatedAsync = DisplayResultAsync,
	};

	ElementReference typesetEditModeLatex;

	private string viewModeLatex = "";

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await DisplayResultAsync();
		}
	}

	private TreeNode GetFractionNode() => new DescendingBranchingNode(@"\frac{", "}{", "}");
	private TreeNode GetBinomialNode() => new DescendingBranchingNode(@"\binom{", "}{", "}");
	private TreeNode GetPowerNode() => new AscendingBranchingNode("", "^{", "}");
	private TreeNode GetSubscriptNode() => new DescendingBranchingNode("", "_{", "}");
	private TreeNode GetSquareRootNode() => new StandardBranchingNode(@"\sqrt{", "}");
	private TreeNode GetNthRootNode() => new DescendingBranchingNode(@"\sqrt[", "]{", "}");

	private async Task ToggleSelectionMode()
	{
		if (_keyboardMemory.InSelectionMode())
		{
			_keyboardMemory.LeaveSelectionMode();
		}
		else
		{
			_keyboardMemory.EnterSelectionMode();
		}
		await DisplayResultAsync();
	}

	private async Task DeleteKeyClicked()
	{
		if (_keyboardMemory.InSelectionMode())
		{
			_keyboardMemory.DeleteSelection();
		}
		else
		{
			_keyboardMemory.DeleteCurrent();
		}

		await DisplayResultAsync();
	}

	private async Task MoveUpClicked() 
	{
		if (_keyboardMemory.InSelectionMode())
		{
			_keyboardMemory.LeaveSelectionMode();
		}
		_keyboardMemory.MoveUp();
		await DisplayResultAsync();
	}

	private async Task MoveLeftClicked()
	{
		if (_keyboardMemory.InSelectionMode())
		{
			_keyboardMemory.SelectLeft();
		}
		else
		{
			_keyboardMemory.MoveLeft();
		}
		await DisplayResultAsync();
	}

	private async Task MoveDownClicked() 	
	{
		if (_keyboardMemory.InSelectionMode())
		{
			_keyboardMemory.LeaveSelectionMode();
		}
		_keyboardMemory.MoveDown();
		await DisplayResultAsync();
	}

	private async Task MoveRightClicked() 
	{
		if (_keyboardMemory.InSelectionMode())
		{
			_keyboardMemory.SelectRight();
		}
		else
		{
			_keyboardMemory.MoveRight();
		}
		await DisplayResultAsync();
	}

	private async Task RenderLatexInKeyAsync(TreeNode node, ElementReference key)
	{
		await JS.InvokeVoidAsync("katex.render", node.GetViewModeLatex(_latexConfiguration), key, new { throwOnError = false});
	}

	private async Task DisplayResultAsync()
	{
		var editModeLatex = _keyboardMemory.GetEditModeLatex(_latexConfiguration);
		await JS.InvokeVoidAsync("katex.render", @$"\displaystyle {editModeLatex}", typesetEditModeLatex, new { throwOnError = false});
		viewModeLatex = _keyboardMemory.GetViewModeLatex(_latexConfiguration);
		StateHasChanged();
	}
}

<style>
	:root {
    --selection-mode-color: @(CssHelper.SelectionModeColor);
}

.dark {
    background-color: black;
    color: white;
}

html {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}

h1 {
    font-size: 1.5rem;
}

input {
    font-size: 1rem;
    width: 2.5rem;
}

#typesetEditModeLatex {
    border: 1px solid gray;
    padding: 0.25rem;
    min-height: 2.5rem;
}

#viewModeLatex {
    text-align: right;
}

#mathKeyboard > * {
    display: inline-block;
    border: 1px solid gray;
    padding: 0.25rem;
    margin: 1px;
    min-width: 1.5rem;
    min-height: 1.5rem;
    vertical-align: middle;
    text-align: center;
    cursor: default;
    user-select: none;
    outline: 0;
}

.inSelectionMode {
    background-color: var(--selection-mode-color);
}

#selectionModeToggle {
    background-color: var(--selection-mode-color);
}

#settingsContainer {
    display: none;
    text-align: left;
}

.setting {
    margin: 1rem;
    cursor: default;
}

.setting-value {
    border: 1px solid gray;
    padding: 0.15rem;
}

.footer {
    text-align: center;
    margin: 15px;
}

a {
    color: #58a6ff;
    text-decoration: none;
    border: 1px solid #58a6ff;
    padding: 0.25rem;
}

#pureLatexFromPhysicalKeys {
    position: absolute;
    left: 0;
    top: 0;
    color: green;
    text-align: right;
}

</style>
